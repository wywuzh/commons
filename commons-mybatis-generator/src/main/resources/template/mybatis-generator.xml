<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="mybatis-generator.properties"></properties>
    <!--数据库驱动-->
    <classPathEntry
            location="D:\Program Files\Apache\Maven\repository\mysql\mysql-connector-java\5.1.47\mysql-connector-java-5.1.47.jar"/>

    <context id="mysql" targetRuntime="MyBatis3">
        <property name="javaFileEncoding" value="UTF-8"/>
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 自定义注释插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.CommentPlugin">
            <!-- 自定义模板路径 -->
            <property name="template" value="src/main/resources/mybatis-generator-comment.ftl"/>
        </plugin>
        <!-- Lombok插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LombokPlugin">
            <!-- @Builder 必须在 Lombok 版本 >= 1.18.2 的情况下 -->
            <property name="@Builder" value="false"/>
            <!-- @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 -->
            <property name="@AllArgsConstructor" value="false"/>
            <property name="@NoArgsConstructor" value="false"/>
        </plugin>
        <!-- 数据Model属性对应Column获取插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ModelColumnPlugin"></plugin>
        <!-- 批量插入插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.BatchInsertPlugin">
            <!--
            开启后可以实现官方插件根据属性是否为空决定是否插入该字段功能！
            需开启allowMultiQueries=true多条sql提交操作，所以不建议使用！插件默认不开启
            -->
            <property name="allowMultiQueries" value="false"/>
        </plugin>
        <!-- 自定义查询插件 -->
        <plugin type="io.github.wywuzh.commons.mybatis.generator.plugins.MySQLSelectByParamsPlugin">
            <!-- 表是否开启逻辑删除，默认为true。如果值为false，表示该表使用的是物理删除，excludeDeletedSql指定的参数值将没有意义。 -->
            <property name="enableLogicDelete" value="true"/>
            <!-- 逻辑删除排除数据sql，即剔除已删除数据的sql -->
            <property name="excludeDeletedSql" value="is_delete = 0"/>
        </plugin>
        <!-- 根据主键删除数据。注：在plugin中配置的property属性做为全局属性存在，若需要对某张表单独定制，可在该table下配置进行覆盖 -->
        <plugin type="io.github.wywuzh.commons.mybatis.generator.plugins.DeleteByPKPlugin">
            <!-- 方法名，默认：deleteByIds。 -->
            <property name="methodName" value="deleteByIds"/>
            <!-- 表是否开启逻辑删除，默认为true。如果传入值为false，表示该表使用的是物理删除，生成的sql为delete删除语句，logicDeleteField、logicDeletedFlag两个参数值将没有意义。 -->
            <property name="enableLogicDelete" value="true"/>
            <!-- 逻辑删除字段，默认值：is_delete -->
            <property name="logicDeleteField" value="is_delete"/>
            <!-- 逻辑删除标识，默认为1 -->
            <property name="logicDeletedFlag" value="1"/>
        </plugin>

        <commentGenerator>
            <!-- 指定mybatis版本 -->
            <property name="mybatisVersion" value="3.5.3"/>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释（true=是，false=否）。如果你不想生成字段注释则将值该为true，否则应该设置为false -->
            <property name="suppressAllComments" value="false"/>
        </commentGenerator>

        <!--数据库链接地址账号密码-->
        <jdbcConnection driverClass="${jdbc.driverClass}"
                        connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}"
                        password="${jdbc.password}">
            <!-- 获取Oracle数据库字段注释 -->
            <property name="remarksReporting" value="true"/>
            <!-- 获取MySQL数据库字段注释 -->
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <javaTypeResolver type="io.github.wywuzh.commons.mybatis.generator.types.JavaTypeResolverSupport">
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--生成Model类存放位置-->
        <javaModelGenerator targetPackage="${javaModel.targetPackage.platform}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml映射文件存放位置-->
        <sqlMapGenerator targetPackage="${sqlMap.targetPackage.platform}" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--Mapper接口类存放位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${javaClient.targetPackage.platform}"
                             targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--生成对应表及类名-->
        <table tableName="system_request_log" domainObjectName="SystemRequestLog"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableCountByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <!-- 表是否开启物理删除，默认为true -->
            <property name="enablePhysicalDelete" value="true"/>
            <!-- 排除数据sql，即剔除已删除数据的sql。注意：需要和enablePhysicalDelete配合使用，只有enablePhysicalDelete为false，该值配置无效 -->
            <property name="excludeDeletedSql" value="and is_delete = 0"/>
            <!-- Where条件语句：Like模糊查询。多个字段用逗号分隔，支持中英文格式（全角和半角）：,， -->
            <property name="conditionsLikeColumns" value=""/>
            <!-- Where条件语句：Foreach in查询。多个字段用逗号分隔，支持中英文格式（全角和半角）：,， -->
            <property name="conditionsForeachInColumns" value=""/>
            <!-- Where条件语句：not in查询字段。多个字段用逗号分隔，支持中英文格式（全角和半角）：,， -->
            <property name="conditionsForeachInColumns" value=""/>
            <!-- 大文本格式 -->
            <columnOverride column="REQUEST_PARAMS" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <columnOverride column="EXCEPTION_INFO" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="system_dict_type" domainObjectName="SystemDictType" enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>
    </context>
</generatorConfiguration>
